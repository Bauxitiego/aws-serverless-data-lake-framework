AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Resources to be created by the common stack

Parameters:
  pPipelineReference:
    Type: String
    Default: none
  pChildAccountId: # used by cicd lambda
    Description: Child AWS account ID
    Type: String
    AllowedPattern: (\d{12}|^$)
    ConstraintDescription: Must be an AWS account ID
  pOrg:
    Description: Name of the organization owning the datalake (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]{2,9}"
  pDomain:
    Description: Data domain name
    Type: String
  pCentralCatalog:
    Description: Central Glue catalog account id
    Type: String
    AllowedPattern: (\d{12}|^$)
    ConstraintDescription: Must be an AWS account ID
    Default: "000000000000"
  pCustomBucketPrefix:
    Description: S3 Bucket Prefix if different from default. Must be a valid S3 Bucket name
    Type: String
    Default: sdlf
  pEnvironment:
    Description: Environment name
    Type: String
  pCloudWatchLogsRetentionInDays:
    Description: The number of days log events are kept in CloudWatch Logs
    Type: Number
    Default: 30
    AllowedValues:
      [
        1,
        3,
        5,
        7,
        14,
        30,
        60,
        90,
        120,
        150,
        180,
        365,
        400,
        545,
        731,
        1827,
        3653,
      ]
  # the ideal would be to fetch ssm:/SDLF/VPC/Enabled and not ask the user to set this variable to true manually.
  # however between AWS::SSM::Parameter::Value<String> not working in CloudFormation modules,
  # Fn::ImportValue not being accepted in CloudFormation modules template fragments,
  # {{resolve:}} being evaluated later than the Conditions block, options are limited.
  pEnableVpc:
    Description: Deploy SDLF resources in a VPC
    Type: String
    Default: false
  # pVpcSecurityGroupIds and pVpcSubnetIds are passed explicitly (unlike in sdlf-cicd/template-cicd-sdlf-repositories.yaml for example)
  # due to Fn::ImportValue not being accepted in CloudFormation modules template fragments
  pVpcSecurityGroupIds:
    Description: VPC Security Groups Ids
    Type: String
    Default: ""
  pVpcSubnetIds:
    Description: VPC Subnet Ids
    Type: String
    Default: ""

Conditions:
  UseCustomBucketPrefix: !Not [!Equals [!Ref pCustomBucketPrefix, sdlf]]
  RunInVpc: !Equals [!Ref pEnableVpc, true]

Globals:
  Function:
    Runtime: python3.12
    Handler: lambda_function.lambda_handler
    KmsKeyArn: !GetAtt rKmsInfraKey.Arn
    VpcConfig: !If
      - RunInVpc
      - SecurityGroupIds: !Split [",", !Ref pVpcSecurityGroupIds]
        SubnetIds: !Split [",", !Ref pVpcSubnetIds]
      - !Ref "AWS::NoValue"

Resources:
  # Role defined upstream due to Lake Formation PutDataLakeSettings constraints
  rDataLakeAdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSGlueServiceRole
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonS3FullAccess
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AWSLakeFormationDataAdmin
        - !If
          - RunInVpc
          - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - !Ref "AWS::NoValue"
      Policies:
        - PolicyName: sdlf-lakeformation-admin
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:AssociateKmsKey
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-glue-replication
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/glue/*
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sdlf-*
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:sdlf-*
              - Sid: DynamoDBAccess
                Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteItem
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:PutItem
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/sdlf-*
              - Sid: SSMAccess
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource:
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/IAM/DataLakeAdminRoleArn
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/Dynamo/DataSchemas

  rLakeFormationDataAccessRole: # https://docs.aws.amazon.com/lake-formation/latest/dg/registration-role.html
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lakeformation.amazonaws.com
                - glue.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:CreateLogGroup
                - logs:PutLogEvents
              Resource:
                - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-lakeformation-acceleration/*"
                - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-lakeformation-acceleration/*:log-stream:*"

  rLakeFormationDataAccessRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: sdlf-lakeformation
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject
              - s3:PutObjectLegalHold
              - s3:PutObjectRetention
              - s3:PutObjectTagging
              - s3:PutObjectVersionTagging
              - s3:Abort*
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::${rRawBucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${rStageBucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${rAnalyticsBucket}"
              - !Sub "arn:${AWS::Partition}:s3:::${rRawBucket}/*"
              - !Sub "arn:${AWS::Partition}:s3:::${rStageBucket}/*"
              - !Sub "arn:${AWS::Partition}:s3:::${rAnalyticsBucket}/*"
          - Effect: Allow
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource:
              - !GetAtt rKmsInfraKey.Arn
              - !GetAtt rKmsDataKey.Arn
      Roles:
        - !Ref rLakeFormationDataAccessRole

  rDataLakeAdminRoleSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/IAM/DataLakeAdminRoleArn
      Type: String
      Value: !GetAtt rDataLakeAdminRole.Arn
      Description: Lake Formation Data Lake Admin Role

  rLakeFormationDataAccessRoleSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/IAM/LakeFormationDataAccessRoleArn
      Type: String
      Value: !GetAtt rLakeFormationDataAccessRole.Arn
      Description: Lake Formation Data Access Role

  rLakeFormationDataAccessRoleNameSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/IAM/LakeFormationDataAccessRole
      Type: String
      Value: !Ref rLakeFormationDataAccessRole
      Description: Lake Formation Data Access Role

  ######## KMS #########
  rKmsInfraKey:
    Type: AWS::KMS::Key
    UpdateReplacePolicy: Retain
    DeletionPolicy: RetainExceptOnCreate
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F76
            reason: Full access is allowed to Key admin and some AWS services
    Properties:
      Description: !Sub SDLF ${pDomain} Infrastructure KMS Key
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Sub sdlf-${pDomain}-infra-key-policy
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: [!Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"]
            Action: kms:*
            Resource: "*"
          - Sid: Allow CloudTrail/CloudWatch alarms access
            Effect: Allow
            Principal:
              Service:
                - cloudtrail.amazonaws.com
                - cloudwatch.amazonaws.com
                - events.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: "*"
          - Sid: Allow logs access
            Effect: Allow
            Principal:
              Service:
                - !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: "*"
          - Sid: Allow SNS access
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
                kms:ViaService: !Sub sns.${AWS::Region}.amazonaws.com
          - Sid: Allow DynamoDB access
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
                kms:ViaService: !Sub dynamodb.${AWS::Region}.amazonaws.com
          - Sid: Allow ElasticSearch access
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
                kms:ViaService: !Sub es.${AWS::Region}.amazonaws.com
              Bool:
                kms:GrantIsForAWSResource: true
          - Sid: Allow LakeFormation access
            Effect: Allow
            Principal:
              AWS: !GetAtt rLakeFormationDataAccessRole.Arn
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Resource: "*"

  rKmsInfraKeyAlias:
    Type: AWS::KMS::Alias
    UpdateReplacePolicy: Retain
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      AliasName: !Sub alias/sdlf-${pDomain}-kms-infra-key
      TargetKeyId: !Ref rKmsInfraKey

  rKmsInfraKeySsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/KMS/InfraKeyArn
      Type: String
      Value: !GetAtt rKmsInfraKey.Arn
      Description: !Sub ARN of the ${pDomain} KMS infrastructure key

  rKmsDataKey:
    Type: AWS::KMS::Key
    UpdateReplacePolicy: Retain
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      Description: !Sub SDLF ${pDomain} Data KMS Key
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Sub sdlf-${pDomain}-data-key-policy
        Statement:
          - Sid: Allow administration of the key
            Action: kms:*
            Effect: Allow
            Principal:
              AWS: [!Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"]
            Resource: "*"
          - Sid: Allow Lake Formation permissions
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Effect: Allow
            Principal:
              AWS: !GetAtt rDataLakeAdminRole.Arn
            Resource: "*"

  rKmsDataKeyAlias:
    Type: AWS::KMS::Alias
    UpdateReplacePolicy: Retain
    DeletionPolicy: RetainExceptOnCreate
    Properties:
      AliasName: !Sub alias/sdlf-${pDomain}-kms-data-key
      TargetKeyId: !Ref rKmsDataKey

  rKmsDataKeySsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/KMS/DataKeyArn
      Type: String
      Value: !GetAtt rKmsDataKey.Arn
      Description: !Sub ARN of the ${pDomain} KMS data key

  ######## S3 #########
  rS3AccessLogsBucket:
    Type: AWS::S3::Bucket
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: Access logs bucket should not have logging enabled https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-server-access-logging.html
    Properties:
      BucketName:
        !If
          - UseCustomBucketPrefix
          - !Sub "${pCustomBucketPrefix}-s3logs"
          - !Sub "${pOrg}-${pDomain}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-s3logs"
      LifecycleConfiguration:
        Rules:
          - Id: InfrequentAccess
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
          - Id: DeepArchive
            Status: Enabled
            Transitions:
              - TransitionInDays: 60
                StorageClass: DEEP_ARCHIVE
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref rKmsDataKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  rS3AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rS3AccessLogsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - s3:PutObject
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rS3AccessLogsBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rS3AccessLogsBucket}
            Condition:
              ArnLike:
                "aws:SourceArn":
                  !If
                    - UseCustomBucketPrefix
                    - !Sub "arn:${AWS::Partition}:s3:::${pCustomBucketPrefix}*"
                    - !Sub "arn:${AWS::Partition}:s3:::${pOrg}-${pDomain}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}*"
              StringEquals:
                "aws:SourceAccount": !Sub ${AWS::AccountId}

  # To Enforce KMS encryption: https://aws.amazon.com/premiumsupport/knowledge-center/s3-bucket-store-kms-encrypted-objects/

  # store CloudFormation artifacts, and any other artifacts that might be created during the lifetime of the datalake
  rArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !If
          - UseCustomBucketPrefix
          - !Sub "${pCustomBucketPrefix}-artifacts"
          - !Sub "${pOrg}-${pDomain}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-artifacts"
      LoggingConfiguration:
        DestinationBucketName: !Ref rS3AccessLogsBucket
        LogFilePrefix:
          !If
            - UseCustomBucketPrefix
            - !Sub "${pCustomBucketPrefix}-artifacts"
            - !Sub "${pOrg}-${pDomain}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-artifacts"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref rKmsDataKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  rArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rArtifactsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowTlsRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rArtifactsBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rArtifactsBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  rRawBucket:
    Type: AWS::S3::Bucket
    DependsOn: rQueueCatalogPolicy
    Properties:
      BucketName:
        !If
          - UseCustomBucketPrefix
          - !Sub "${pCustomBucketPrefix}-raw"
          - !Sub "${pOrg}-${pDomain}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-raw"
      LoggingConfiguration:
        DestinationBucketName: !Ref rS3AccessLogsBucket
        LogFilePrefix:
          !If
            - UseCustomBucketPrefix
            - !Sub "${pCustomBucketPrefix}-raw"
            - !Sub "${pOrg}-${pDomain}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-raw"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref rKmsDataKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  rRawBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rRawBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowTlsRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rRawBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rRawBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  rStageBucket:
    Type: AWS::S3::Bucket
    DependsOn: rQueueCatalogPolicy
    Properties:
      BucketName:
        !If
          - UseCustomBucketPrefix
          - !Sub "${pCustomBucketPrefix}-stage"
          - !Sub "${pOrg}-${pDomain}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-stage"
      LoggingConfiguration:
        DestinationBucketName: !Ref rS3AccessLogsBucket
        LogFilePrefix:
          !If
            - UseCustomBucketPrefix
            - !Sub "${pCustomBucketPrefix}-stage"
            - !Sub "${pOrg}-${pDomain}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-stage"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref rKmsDataKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  rStageBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rStageBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowTlsRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rStageBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rStageBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  rAnalyticsBucket:
    Type: AWS::S3::Bucket
    DependsOn: rQueueCatalogPolicy
    Properties:
      BucketName:
        !If
          - UseCustomBucketPrefix
          - !Sub "${pCustomBucketPrefix}-analytics"
          - !Sub "${pOrg}-${pDomain}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-analytics"
      LoggingConfiguration:
        DestinationBucketName: !Ref rS3AccessLogsBucket
        LogFilePrefix:
          !If
            - UseCustomBucketPrefix
            - !Sub "${pCustomBucketPrefix}-analytics"
            - !Sub "${pOrg}-${pDomain}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-analytics"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref rKmsDataKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true

  rAnalyticsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rAnalyticsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowTlsRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rAnalyticsBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rAnalyticsBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  rAthenaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !If
          - UseCustomBucketPrefix
          - !Sub "${pCustomBucketPrefix}-athena"
          - !Sub "${pOrg}-${pDomain}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-athena"
      LoggingConfiguration:
        DestinationBucketName: !Ref rS3AccessLogsBucket
        LogFilePrefix:
          !If
            - UseCustomBucketPrefix
            - !Sub "${pCustomBucketPrefix}-athena"
            - !Sub "${pOrg}-${pDomain}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-athena"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref rKmsDataKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  rAthenaBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rAthenaBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowTlsRequestsOnly
            Action: s3:*
            Effect: Deny
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rAthenaBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rAthenaBucket}
            Condition:
              Bool:
                aws:SecureTransport: False
            Principal: "*"

  rS3AccessLogsBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/S3/AccessLogsBucket
      Type: String
      Value: !Ref rS3AccessLogsBucket
      Description: S3 Access Logs Bucket

  rS3ArtifactBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/S3/ArtifactsBucket
      Type: String
      Value: !Ref rArtifactsBucket
      Description: Name of the Artifacts S3 bucket

  rS3CentralBucketSsm: # kept for backward compatibility (it is always the same as rS3RawBucketSsm)
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/S3/CentralBucket
      Type: String
      Value: !Ref rRawBucket
      Description: Name of the Central S3 bucket

  rS3RawBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/S3/RawBucket
      Type: String
      Value: !Ref rRawBucket
      Description: Name of the Raw S3 bucket

  rS3StageBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/S3/StageBucket
      Type: String
      Value: !Ref rStageBucket
      Description: Name of the Stage S3 bucket

  rS3AnalyticsBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/S3/AnalyticsBucket
      Type: String
      Value: !Ref rAnalyticsBucket
      Description: Name of the Analytics S3 bucket

  rS3AthenaBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/S3/AthenaBucket
      Type: String
      Value: !Ref rAthenaBucket
      Description: Name of the Athena results S3 bucket

  ######## DYNAMODB #########
  rDynamoObjectMetadata: # tracking all objects in the datalake
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: DynamoDB tables require specific names to be compatible with Octagon
    Properties:
      TableName: !Sub sdlf-ObjectMetadata-${pEnvironment}
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      SSESpecification:
        SSEEnabled: True
        SSEType: KMS
        KMSMasterKeyId: !GetAtt rKmsInfraKey.Arn
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True

  rDynamoDatasets:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: DynamoDB tables require specific names to be compatible with Octagon
    Properties:
      TableName: !Sub sdlf-Datasets-${pEnvironment}
      KeySchema:
        - AttributeName: name
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: True
        SSEType: KMS
        KMSMasterKeyId: !GetAtt rKmsInfraKey.Arn
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True

  rDynamoArtifacts:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: DynamoDB tables require specific names to be compatible with Octagon
    Properties:
      TableName: !Sub sdlf-Artifacts-${pEnvironment}
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: date
          AttributeType: S
        - AttributeName: pipeline_and_target_type
          AttributeType: S
        - AttributeName: dataset
          AttributeType: S
        - AttributeName: pipeline
          AttributeType: S
        - AttributeName: pipelineSessionId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: date-pipeline-artifact-type-index
          KeySchema:
            - AttributeName: date
              KeyType: HASH
            - AttributeName: pipeline_and_target_type
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: dataset-date-index
          KeySchema:
            - AttributeName: dataset
              KeyType: HASH
            - AttributeName: date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: date-dataset-index
          KeySchema:
            - AttributeName: date
              KeyType: HASH
            - AttributeName: dataset
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: pipeline-date-index
          KeySchema:
            - AttributeName: pipeline
              KeyType: HASH
            - AttributeName: date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: pipelineSessionId-index
          KeySchema:
            - AttributeName: pipelineSessionId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      SSESpecification:
        SSEEnabled: True
        SSEType: KMS
        KMSMasterKeyId: !GetAtt rKmsInfraKey.Arn
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True

  rDynamoMetrics:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: DynamoDB tables require specific names to be compatible with Octagon
    Properties:
      TableName: !Sub sdlf-Metrics-${pEnvironment}
      KeySchema:
        - AttributeName: root
          KeyType: HASH
        - AttributeName: metric
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: root
          AttributeType: S
        - AttributeName: metric
          AttributeType: S
        - AttributeName: last_updated_date
          AttributeType: S
        - AttributeName: type
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: last_updated_date-metric-index
          KeySchema:
            - AttributeName: last_updated_date
              KeyType: HASH
            - AttributeName: metric
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: type-metric-index
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: metric
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: root-last_updated_date-index
          KeySchema:
            - AttributeName: root
              KeyType: HASH
            - AttributeName: last_updated_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      SSESpecification:
        SSEEnabled: True
        SSEType: KMS
        KMSMasterKeyId: !GetAtt rKmsInfraKey.Arn
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True

  rDynamoConfiguration:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: DynamoDB tables require specific names to be compatible with Octagon
    Properties:
      TableName: !Sub sdlf-Configuration-${pEnvironment}
      KeySchema:
        - AttributeName: key
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: key
          AttributeType: S
        - AttributeName: type
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: type-index
          KeySchema:
            - AttributeName: type
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: True
        SSEType: KMS
        KMSMasterKeyId: !GetAtt rKmsInfraKey.Arn
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True

  rDynamoTeams:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: DynamoDB tables require specific names to be compatible with Octagon
    Properties:
      TableName: !Sub sdlf-Teams-${pEnvironment}
      KeySchema:
        - AttributeName: team
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: team
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: True
        SSEType: KMS
        KMSMasterKeyId: !GetAtt rKmsInfraKey.Arn
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True

  rDynamoPipelines:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: DynamoDB tables require specific names to be compatible with Octagon
    Properties:
      TableName: !Sub sdlf-Pipelines-${pEnvironment}
      KeySchema:
        - AttributeName: name
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: True
        SSEType: KMS
        KMSMasterKeyId: !GetAtt rKmsInfraKey.Arn
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True

  rDynamoEvents:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: DynamoDB tables require specific names to be compatible with Octagon
    Properties:
      TableName: !Sub sdlf-Events-${pEnvironment}
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: date
          AttributeType: S
        - AttributeName: reason
          AttributeType: S
        - AttributeName: pipeline
          AttributeType: S
        - AttributeName: date_and_reason
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: date-reason-index
          KeySchema:
            - AttributeName: date
              KeyType: HASH
            - AttributeName: reason
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: pipeline-date_reason-index
          KeySchema:
            - AttributeName: pipeline
              KeyType: HASH
            - AttributeName: date_and_reason
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: reason-date-index
          KeySchema:
            - AttributeName: reason
              KeyType: HASH
            - AttributeName: date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      SSESpecification:
        SSEEnabled: True
        SSEType: KMS
        KMSMasterKeyId: !GetAtt rKmsInfraKey.Arn
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True

  rDynamoPipelineExecutionHistory:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: DynamoDB tables require specific names to be compatible with Octagon
    Properties:
      TableName: !Sub sdlf-PipelineExecutionHistory-${pEnvironment}
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: pipeline
          AttributeType: S
        - AttributeName: last_updated_timestamp
          AttributeType: S
        - AttributeName: execution_date
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: status_last_updated_timestamp
          AttributeType: S
        - AttributeName: dataset
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: pipeline-last-updated-index
          KeySchema:
            - AttributeName: pipeline
              KeyType: HASH
            - AttributeName: last_updated_timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: execution_date-status-index
          KeySchema:
            - AttributeName: execution_date
              KeyType: HASH
            - AttributeName: status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: pipeline-execution_date-index
          KeySchema:
            - AttributeName: pipeline
              KeyType: HASH
            - AttributeName: execution_date
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: execution_date-last_updated-index
          KeySchema:
            - AttributeName: execution_date
              KeyType: HASH
            - AttributeName: last_updated_timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: status-last_updated-index
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: last_updated_timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: pipeline-status_last_updated-index
          KeySchema:
            - AttributeName: pipeline
              KeyType: HASH
            - AttributeName: status_last_updated_timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: dataset-status_last_updated_timestamp-index
          KeySchema:
            - AttributeName: dataset
              KeyType: HASH
            - AttributeName: status_last_updated_timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      SSESpecification:
        SSEEnabled: True
        SSEType: KMS
        KMSMasterKeyId: !GetAtt rKmsInfraKey.Arn
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True

  rDynamoDataSchemas: # structure of datasets (effectively Glue schemas)
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: DynamoDB tables require specific names to be compatible with Octagon
    Properties:
      TableName: !Sub sdlf-DataSchemas-${pEnvironment}
      KeySchema:
        - AttributeName: name
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: name
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      SSESpecification:
        SSEEnabled: True
        SSEType: KMS
        KMSMasterKeyId: !GetAtt rKmsInfraKey.Arn
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True

  rDynamoManifests: # for manifest file-based processing (file listing other files to process)
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Delete
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W28
            reason: DynamoDB tables require specific names to be compatible with Octagon
    Properties:
      TableName: !Sub sdlf-Manifests-${pEnvironment}
      KeySchema:
        - AttributeName: dataset_name
          KeyType: HASH
        - AttributeName: datafile_name
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: dataset_name
          AttributeType: S
        - AttributeName: datafile_name
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      SSESpecification:
        SSEEnabled: True
        SSEType: KMS
        KMSMasterKeyId: !GetAtt rKmsInfraKey.Arn
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True

  rDynamoObjectMetadataSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/Dynamo/ObjectCatalog
      Type: String
      Value: !Ref rDynamoObjectMetadata
      Description: Name of the DynamoDB used to store metadata

  rDynamoTransformMappingSsm: # kept for backward-compatibility, always the same as rDynamoDatasetsSsm
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/Dynamo/TransformMapping
      Type: String
      Value: !Ref rDynamoDatasets
      Description: Name of the DynamoDB used to store dataset details

  rDynamoDatasetsSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/Dynamo/Datasets
      Type: String
      Value: !Ref rDynamoDatasets
      Description: Name of the DynamoDB used to store dataset details

  rDynamoPipelinesSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/Dynamo/Pipelines
      Type: String
      Value: !Ref rDynamoPipelines
      Description: Name of the DynamoDB used to store pipelines metadata

  rDynamoDataSchemasSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/Dynamo/DataSchemas
      Type: String
      Value: !Ref rDynamoDataSchemas
      Description: Name of the DynamoDB used to store data schemas

  rDynamoManifestsSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/Dynamo/Manifests
      Type: String
      Value: !Ref rDynamoManifests
      Description: Name of the DynamoDB used to store manifest process metadata

  ######## Domain Object Catalog #########
  # all objects going through the raw bucket is catalogued in DynamoDB
  rRoleLambdaExecution:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !If
          - RunInVpc
          - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - !Ref "AWS::NoValue"
      Policies:
        - PolicyName: sdlf-catalog
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-catalog*
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:DeleteMessageBatch
                  - sqs:GetQueueAttributes
                  - sqs:GetQueueUrl
                  - sqs:ListQueues
                  - sqs:ListDeadLetterSourceQueues
                  - sqs:ListQueueTags
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                  - sqs:SendMessageBatch
                Resource:
                  - !GetAtt rQueueCatalog.Arn
                  - !GetAtt rDeadLetterQueueCatalog.Arn
              - Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:DeleteItem
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                  - dynamodb:GetRecords
                  - dynamodb:PutItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/sdlf-*
              - Effect: Allow
                Action:
                  - kms:CreateGrant
                  - kms:Decrypt
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:GenerateDataKey*
                  - kms:ReEncrypt*
                Resource: !GetAtt rKmsInfraKey.Arn
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/EventBridge/*

  rQueueCatalog:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt rDeadLetterQueueCatalog.Arn
        maxReceiveCount: 1
      VisibilityTimeout: 60
      MessageRetentionPeriod: 604800
      KmsMasterKeyId: !GetAtt rKmsInfraKey.Arn

  rDeadLetterQueueCatalog:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      MessageRetentionPeriod: 1209600
      VisibilityTimeout: 60
      KmsMasterKeyId: !GetAtt rKmsInfraKey.Arn

  rQueueCatalogPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - SQS:SendMessage
            Resource: !GetAtt rQueueCatalog.Arn
            Condition:
              ArnEquals:
                "aws:SourceArn":
                  !If
                    - UseCustomBucketPrefix
                    - - !Sub "arn:${AWS::Partition}:s3:::${pCustomBucketPrefix}-raw"
                      - !Sub "arn:${AWS::Partition}:s3:::${pCustomBucketPrefix}-stage"
                      - !Sub "arn:${AWS::Partition}:s3:::${pCustomBucketPrefix}-analytics"
                    - - !Sub "arn:${AWS::Partition}:s3:::${pOrg}-${pDomain}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-raw"
                      - !Sub "arn:${AWS::Partition}:s3:::${pOrg}-${pDomain}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-stage"
                      - !Sub "arn:${AWS::Partition}:s3:::${pOrg}-${pDomain}-${pEnvironment}-${AWS::Region}-${AWS::AccountId}-analytics"
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      Queues:
        - !Ref rQueueCatalog

  rQueueLambdaCatalogEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: True
      EventSourceArn: !GetAtt rQueueCatalog.Arn
      FunctionName: !GetAtt rLambdaCatalog.Arn

  rLambdaCatalog:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/catalog/src
      Environment:
        Variables:
          ENV: !Ref pEnvironment
      Description: Catalogs S3 Put and Delete to ObjectMetaDataCatalog
      MemorySize: 256
      Timeout: 60
      Role: !GetAtt rRoleLambdaExecution.Arn

  rLambdaCatalogRedrive:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./lambda/catalog-redrive/src
      FunctionName: !Sub sdlf-${pDomain}-catalog-redrive
      Environment:
        Variables:
          QUEUE: !GetAtt rQueueCatalog.QueueName
          DLQ: !GetAtt rDeadLetterQueueCatalog.QueueName
      Description: Redrives Failed S3 Put/Delete to Catalog Lambda
      MemorySize: 256
      Timeout: 60
      Role: !GetAtt rRoleLambdaExecution.Arn

  rLambdaCatalogRedriveLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${rLambdaCatalogRedrive}
      RetentionInDays: !Ref pCloudWatchLogsRetentionInDays
      KmsKeyId: !GetAtt rKmsInfraKey.Arn

  rS3ObjectTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      State: ENABLED
      EventPattern:
        source:
          - aws.s3
        detail-type:
          - Object Created
          - Object Deleted
        detail:
          bucket:
            - !Ref rRawBucket
            - !Ref rStageBucket
            - !Ref rAnalyticsBucket
      Targets:
        - Arn: !GetAtt rQueueCatalog.Arn
          RetryPolicy:
            MaximumRetryAttempts: 3
            MaximumEventAgeInSeconds: 600
          DeadLetterConfig:
            Arn: !GetAtt rDeadLetterQueueCatalog.Arn
          Id: sdlf-catalog

  ######## GLUE REPLICATION #########
  rLambdaReplicate:
    Type: AWS::Serverless::Function
    Properties:
      Description: Replicates Glue Catalog Metadata and Data Quality to Octagon DataSchemas Table
      CodeUri: ./lambda/replicate/src
      Environment:
        Variables:
          ENV: !Ref pEnvironment
      MemorySize: 128
      Timeout: 300
      Role: !GetAtt rDataLakeAdminRole.Arn

  rLambdaReplicateLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${rLambdaReplicate}
      RetentionInDays: !Ref pCloudWatchLogsRetentionInDays
      KmsKeyId: !GetAtt rKmsInfraKey.Arn

  rEventsInvokeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref rLambdaReplicate
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt rLambdaEventsRule.Arn

  rLambdaEventsRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Triggers Glue replicate Lambda upon change to metadata catalog
      State: ENABLED
      EventPattern:
        source:
          - aws.glue
        detail-type:
          - Glue Data Catalog Database State Change
          - Glue Data Catalog Table State Change
      Targets:
        - Arn: !GetAtt rLambdaReplicate.Arn
          Id: LambdaReplicate

  ######## IAM role for Glue crawlers in this domain #########
  rDatalakeCrawlerRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: The actions with "*" are all ones that only support the all resources wildcard
    Properties:
      Path: !Sub /sdlf-${pDomain}/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: !Sub sdlf-${pDomain}-glue-crawler
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                Resource: !Sub arn:${AWS::Partition}:s3:::aws-glue-*
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::aws-glue-*/*
                  - !Sub arn:${AWS::Partition}:s3:::*/*aws-glue-*/*
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::crawler-public*
                  - !Sub arn:${AWS::Partition}:s3:::aws-glue-*
              - Effect: Allow
                Action:
                  - s3:ListObjectsV2
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:PutObject
                  - s3:PutObjectVersion
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${rRawBucket}/*"
                  - !Sub "arn:${AWS::Partition}:s3:::${rStageBucket}/*"
                  - !Sub "arn:${AWS::Partition}:s3:::${rAnalyticsBucket}/*"
              - Effect: Allow
                Action:
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:CreateGrant
                Resource:
                  - !GetAtt rKmsInfraKey.Arn
                  - !GetAtt rKmsDataKey.Arn
              - Effect: Allow
                Action:
                  - lakeformation:GetDataAccess # W11 exception
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:AssociateKmsKey
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-glue/crawlers-role/sdlf-*

  rDatalakeCrawlerRoleArnSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/IAM/CrawlerRoleArn
      Type: String
      Value: !GetAtt rDatalakeCrawlerRole.Arn
      Description: The ARN of the Crawler role

  ######## SSM OUTPUTS #########
  rOrganizationSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/Misc/pOrg
      Type: String
      Value: !Ref pOrg
      Description: Name of the Organization owning the datalake

  rDomainSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/Misc/pDomain
      Type: String
      Value: !Ref pDomain
      Description: Data domain name

  rEnvironmentSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/Misc/pEnv
      Type: String
      Value: !Ref pEnvironment
      Description: Environment name

  rCentralCatalogSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/Misc/CentralCatalog/AccountId
      Type: String
      Value: !Ref pCentralCatalog
      Description: Central Glue catalog account id

Outputs:
  oPipelineReference:
    Description: CodePipeline reference this stack has been deployed with
    Value: !Ref pPipelineReference
  oChildAccountId:
    Description: Child AWS account ID
    Value: !Ref pChildAccountId
