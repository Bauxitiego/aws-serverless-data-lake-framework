AWSTemplateFormatVersion: "2010-09-09"
Description: Contains all the resources necessary for a single dataset

Parameters:
  pPipelineReference:
    Type: String
    Default: none
  pOrg:
    Description: Name of the organization owning the datalake
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pOrg}}"
  pDomain:
    Description: Data domain name
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pDomain}}"
  pCentralCatalog:
    Description: Central Glue catalog account id
    Type: String
    AllowedPattern: (\d{12}|^$)
    ConstraintDescription: Must be an AWS account ID
    Default: "000000000000"
  pDatasetName:
    Description: The name of the dataset (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]{2,14}"
  pEnvironment:
    Description: Environment name
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pEnv}}"
  pStageBucket:
    Description: The stage bucket for the solution
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/StageBucket}}"
  pTeamName:
    Description: Name of the team owning the pipeline (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]*"
  pPipelineDetails:
    Type: String
    Default: >-
      {
        "main": {
          "B": {
            "glue_capacity": {
              "NumberOfWorkers": 10,
              "WorkerType": "G.1X"
            },
            "glue_extra_arguments": {
              "--enable-auto-scaling": "true"
            }
          }
        }
      }

Conditions:
  cNoCentralCatalog: !Equals [!Ref pCentralCatalog, "000000000000"] # there is no central catalog
  cCentralCatalog: !Not [!Condition cNoCentralCatalog] # there is a central catalog
  cInCentralCatalogAccount: !Equals [!Ref pCentralCatalog, !Ref AWS::AccountId] # there is a central catalog, and we're in the AWS account it's hosted in
  cNotInCentralCatalogAccount: !Not [!Condition cInCentralCatalogAccount] # there is a central catalog, but we're in a producer AWS account
  cCreateResourceLink: !And # is it really useful
    - !Condition cCentralCatalog
    - !Condition cNotInCentralCatalogAccount
  cNoCatalogOrInCatalogAccount: !Or
    - !Condition cNoCentralCatalog
    - !Condition cInCentralCatalogAccount

Resources:
  ######## GLUE #########
  # create a Glue database for this dataset
  # if this is a central catalog setup, deploy this first in the central catalog, then in the producer catalog
  # in the producer account, it will then create a resource link to the database in the central catalog account
  rGlueDataCatalog:
    Type: AWS::Glue::Database
    Properties:
      CatalogId: !Ref AWS::AccountId
      DatabaseInput:
        Description: !If
          - cCreateResourceLink
          - !Ref "AWS::NoValue" # Description and resource link cannot exist together in a database!
          - !Sub "${pTeamName} team ${pDatasetName} metadata catalog"
        Name: !If
          - cCreateResourceLink
          - !Sub "${pOrg}_${pDomain}_${pEnvironment}_${pTeamName}_${pDatasetName}_rl"
          - !Sub "${pOrg}_${pDomain}_${pEnvironment}_${pTeamName}_${pDatasetName}_db"
        TargetDatabase: !If
          - cCreateResourceLink
          - CatalogId: !Ref pCentralCatalog
            DatabaseName: !Sub ${pOrg}_${pDomain}_${pEnvironment}_${pTeamName}_${pDatasetName}_db
          - !Ref "AWS::NoValue"

  # tag dataset with lf-tag sdlf:{domain}
  # if there is no central catalog, the tag and dataset belong to the current account
  # if there is a central catalog, the tag and dataset belong to the catalog account
  rGlueDataCatalogDomainLakeFormationTag:
    Type: AWS::LakeFormation::TagAssociation
    Condition: cNoCatalogOrInCatalogAccount
    Properties:
      LFTags:
        - CatalogId: !If
            - cInCentralCatalogAccount
            - !Ref pCentralCatalog
            - !Ref AWS::AccountId
          TagKey: !Sub sdlf:${pDomain}
          TagValues:
            - !Ref pDomain
      Resource:
        Database:
          CatalogId: !If
            - cInCentralCatalogAccount
            - !Ref pCentralCatalog
            - !Ref AWS::AccountId
          Name: !Ref rGlueDataCatalog

  # # associate the
  # rCentralGlueDataCatalogTeamLakeFormationTag:
  #   Type: AWS::LakeFormation::TagAssociation
  #   Condition: cInCentralCatalogAccount
  #   Properties:
  #     Resource:
  #       Database:
  #         CatalogId: !Ref AWS::AccountId
  #         Name: !Ref rGlueDataCatalog
  #     LFTags:
  #       - CatalogId: !Ref AWS::AccountId
  #         TagKey: !Sub "sdlf:${pDomain}:${pTeamName}"
  #         TagValues:
  #           - !Ref pTeamName

  # rChildCentralGlueDataCatalogTeamLakeFormationTag:
  #   Type: AWS::LakeFormation::TagAssociation
  #   Condition: cNotInCentralCatalogAccount
  #   Properties:
  #     Resource:
  #       Database:
  #         CatalogId: !Ref pCentralCatalog
  #         Name: !Sub ${pOrg}_${pDomain}_${pEnvironment}_${pTeamName}_${pDatasetName}_db
  #     LFTags:
  #       - CatalogId: !Ref pCentralCatalog
  #         TagKey: !Sub "sdlf:${pDomain}:${pTeamName}"
  #         TagValues:
  #           - !Ref pTeamName

  # rGlueDataCatalogDomainLakeFormationTag:
  #   Type: AWS::LakeFormation::TagAssociation
  #   Condition: cInCentralCatalogAccount
  #   Properties:
  #     Resource:
  #       Database:
  #         CatalogId: !Ref AWS::AccountId
  #         Name: !Ref rGlueDataCatalog
  #     LFTags:
  #       - CatalogId: !Ref AWS::AccountId
  #         TagKey: !Sub "sdlf:${pDomain}"
  #         TagValues:
  #           - !Ref pDomain

  rGlueCrawler:
    Type: AWS::Glue::Crawler
    Condition: cNotInCentralCatalogAccount
    Properties:
      Role: "{{resolve:ssm:/SDLF/IAM/CrawlerRoleArn}}"
      CrawlerSecurityConfiguration: !Sub "{{resolve:ssm:/SDLF/Glue/${pTeamName}/SecurityConfigurationId}}"
      DatabaseName: !Ref rGlueDataCatalog
      Name: !Sub sdlf-${pTeamName}-${pDatasetName}-post-stage-crawler
      Targets:
        S3Targets:
          - Path: !Sub s3://${pStageBucket}/post-stage/${pTeamName}/${pDatasetName}

  rGlueCrawlerResourceLinkLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Condition: cCreateResourceLink
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: "{{resolve:ssm:/SDLF/IAM/CrawlerRoleArn}}"
      Permissions:
        - DESCRIBE
      Resource:
        DatabaseResource:
          Name: !Ref rGlueDataCatalog

  # so this gives permissions on target db if we have a resource link
  # rGlueCrawlerLakeFormationPermissions:
  #   Type: AWS::LakeFormation::PrincipalPermissions
  #   DependsOn: rGlueDataCatalog
  #   Condition: cCreateResourceLink
  #   Properties:
  #     Principal:
  #       DataLakePrincipalIdentifier: arn:aws:iam::436842067083:role/sdlf-cicd-team-iot
  #       !Sub "{{resolve:ssm:/SDLF/IAM/CrawlerRoleArn}}"
  #     Resource:
  #       Database:
  #         CatalogId: !Ref pCentralCatalog
  #         Name: !Sub ${pOrg}_${pDomain}_${pEnvironment}_${pTeamName}_${pDatasetName}_db
  #     Permissions:
  #       - CREATE_TABLE
  #       - ALTER
  #       - DESCRIBE
  #     PermissionsWithGrantOption: []
  # rGlueCrawlerLakeFormationPermissions:
  #   Type: AWS::LakeFormation::Permissions
  #   DependsOn: rGlueDataCatalog
  #   Condition: cNotInCentralCatalogAccount
  #   Properties:
  #     DataLakePrincipal:
  #       DataLakePrincipalIdentifier: !Sub "{{resolve:ssm:/SDLF/IAM/CrawlerRoleArn}}"
  #     Permissions:
  #       - CREATE_TABLE
  #       - ALTER
  #       - DESCRIBE
  #     Resource:
  #       DatabaseResource:
  #         CatalogId: !If
  #           - cCreateResourceLink
  #           - !Ref pCentralCatalog
  #           - !Ref "AWS::NoValue"
  #         Name: !Sub ${pOrg}_${pDomain}_${pEnvironment}_${pTeamName}_${pDatasetName}_db

  # rGlueCrawlerResourceLinkLakeFormationPermissions:
  #   Type: AWS::LakeFormation::Permissions
  #   Condition: cCreateResourceLink
  #   Properties:
  #     DataLakePrincipal:
  #       DataLakePrincipalIdentifier: !Sub "{{resolve:ssm:/SDLF/IAM/CrawlerRoleArn}}"
  #     Permissions:
  #       - DESCRIBE
  #     Resource:
  #       DatabaseResource:
  #         Name: !Ref rGlueDataCatalog

  ######## SSM #########
  rGlueDataCatalogSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !If
        - cInCentralCatalogAccount
        - !Sub /SDLF/Glue/${pDomain}/${pTeamName}/${pDatasetName}/DataCatalog
        - !Sub /SDLF/Glue/${pTeamName}/${pDatasetName}/DataCatalog
      Type: String
      Value: !Sub "${pOrg}_${pDomain}_${pEnvironment}_${pTeamName}_${pDatasetName}_db"
      Description: !Sub "${pTeamName} team ${pDatasetName} metadata catalog"

  rResourceLinkGlueDataCatalogSsm:
    Type: AWS::SSM::Parameter
    Condition: cCreateResourceLink
    Properties:
      Name: !Sub /SDLF/Glue/${pTeamName}/${pDatasetName}/ResourceLink
      Type: String
      Value: !Ref rGlueDataCatalog
      Description: !Sub "${pTeamName} team ${pDatasetName} resource link"

  rGlueCrawlerSsm:
    Type: AWS::SSM::Parameter
    Condition: cNotInCentralCatalogAccount
    Properties:
      Name: !Sub /SDLF/Glue/${pTeamName}/${pDatasetName}/GlueCrawler
      Type: String
      Value: !Ref rGlueCrawler
      Description: !Sub "${pTeamName} team ${pDatasetName} Glue crawler"

  rDatasetSsm:
    Type: AWS::SSM::Parameter
    Condition: cNotInCentralCatalogAccount
    Properties:
      Name: !Sub /SDLF/Datasets/${pTeamName}/${pDatasetName}
      Type: String
      Value: !Ref pPipelineDetails # bit of a hack for datasets lambda
      Description: !Sub "Placeholder ${pTeamName} ${pDatasetName}"

Outputs:
  oPipelineReference:
    Description: CodePipeline reference this stack has been deployed with
    Value: !Ref pPipelineReference
  oPipelineTransforms:
    Description: Transforms to put in DynamoDB
    Value: !Ref pPipelineDetails
